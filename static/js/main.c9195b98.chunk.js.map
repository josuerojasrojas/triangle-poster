{"version":3,"sources":["Components/Triangle.js","App.js","serviceWorker.js","index.js"],"names":["SQRROOT3","Math","sqrt","Triangle","width","firstColor","secondColor","zindex","fColor","concat","sColor","height","backgroundImage","zIndex","amount","triangles","colorDif","push","round","slice","i","style","this","getTriangleStyle","react_default","a","createElement","key","className","leftright","props","styleTriangleWrapper","createTriangles","numTriangles","React","Component","App","href","Triangle_Triangle","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9195b98.chunk.js","sourcesContent":["import React from 'react';\nimport '../Styles/Triangle.css';\n\nconst SQRROOT3 = Math.sqrt(3);\n\nexport default class Triangle extends React.Component {\n  // return the border size for triangle\n  getTriangleStyle(width, firstColor, secondColor, zindex){\n    const fColor = `rgb(${firstColor[0]}, ${firstColor[1]}, ${firstColor[2]})`;\n    const sColor = `rgb(${secondColor[0]}, ${secondColor[1]}, ${secondColor[2]})`;\n    return {\n      width: `${width}px`,\n      height: `${width}px`,\n      backgroundImage: `linear-gradient(120deg, ${fColor}, ${sColor})`,\n      zIndex: zindex\n    }\n  }\n  createTriangles(amount, width, firstColor, secondColor){\n    let triangles = [];\n    let triangleDiff = 32;\n    let colorDif = [];\n    colorDif.push(Math.round((secondColor[0] > firstColor[0] ? -(secondColor[0] - firstColor[0]) : firstColor[0] - secondColor[0])/amount));\n    colorDif.push(Math.round((secondColor[1] > firstColor[1] ? -(secondColor[1] - firstColor[1]) : firstColor[1] - secondColor[1])/amount));\n    colorDif.push(Math.round((secondColor[0] > firstColor[2] ? -(secondColor[2] - firstColor[2]) : firstColor[2] - secondColor[2])/amount));\n    let fColor = firstColor.slice();\n    let sColor = [fColor[0]-colorDif[0], fColor[1]-colorDif[1], fColor[2]-colorDif[2]];\n    let zIndex = 1;\n    for(let i = 0; i < amount; i++){\n      let style = {};\n      if(i === 0) style = this.getTriangleStyle(width, firstColor, firstColor, zIndex++);\n      else if(i === amount-1) style = this.getTriangleStyle(width, secondColor, secondColor, zIndex++)\n      else style = this.getTriangleStyle(width, sColor, fColor, zIndex++)\n      triangles.push(\n        <div\n          key={`triangle${i}`}\n          className='triangle'\n          style={style}>\n        </div>\n      )\n      if(i !== 0 || i !== amount-1){\n        fColor = sColor.slice();\n        sColor = [fColor[0]-colorDif[0], fColor[1]-colorDif[1], fColor[2]-colorDif[2]];\n\n      }\n      width-=triangleDiff;\n    }\n    return triangles\n  }\n  getTriangleWidth(width){\n    const leftright = width/2;\n    const height = width*SQRROOT3/2;\n    return `0 ${leftright}px ${height}px ${leftright}px`\n  }\n  render(){\n    const width = this.props.width;\n    const firstColor = this.props.firstColor;\n    const secondColor = this.props.secondColor;\n    const styleTriangleWrapper = {\n      width: `${width}px`,\n      height: `${width}px`\n    }\n\n    return(\n      <div style={styleTriangleWrapper} className='triangle-wrapper'>\n        {this.createTriangles(this.props.numTriangles, width, firstColor, secondColor)}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Triangle from './Components/Triangle';\nimport './Styles/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='poster'>\n          <div className='header'>\n            <a href='https://dribbble.com/shots/4864465-PosterSeries-BasicBlends-Jungle'>Poster<br/>Source</a>\n            <p>/07</p>\n          </div>\n          <Triangle\n            width={250}\n            numTriangles={6}\n            firstColor={[71,65,156]}\n            secondColor={[166,215,102]}/>\n          <a href='https://github.com/withcheesepls/triangle-poster'>Source</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}